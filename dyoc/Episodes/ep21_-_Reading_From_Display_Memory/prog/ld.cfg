# This is taken from https://cc65.github.io/doc/customizing.html
MEMORY
{
   # The Zero Page segment has a fixed length of 0x0100 and a fixed location of
   # 0x0000.
   ZP:
      start  $0000
      size   $0100
      type   rw;

   # Allow 4K (0x1000) of RAM. This must match the address decoding in lines
   # 174 and 180 in comp.vhd
   RAM:
      start  $0200
      size   $0E00
      type   rw
      define yes; # Define symbols __RAM_START__ and __RAM_SIZE__

   # Allow 4K (0x1000) of ROM. This must match the address decoding in lines
   # 173 and 179 in comp.vhd
   ROM:
      start  $F000
      size   $1000
      type   ro
      file   "build/rom.bin";
}

SEGMENTS
{
   ZEROPAGE:
      load     ZP
      type     zp;

   # The DATA segment contains writeable data that was specifically
   # initialized.  The variable reside in RAM, but the initialized values are
   # stored in ROM, and must be copied to RAM at startup. This copying is
   # handled by the startup code in prog/crt0.s.
   DATA:
      load     ROM
      type     rw
      define   yes   # Define symbols __DATA_LOAD__ and __DATA_SIZE__
      run      RAM;  # Define symbol __DATA_RUN__

   # The BSS segment contains writeable data that is not initialized.
   # Clearing of this segment is handled by the startup code
   # in prog/crt0.s
   BSS:
      load     RAM
      type     bss
      define   yes;  # Define symbols __BSS_LOAD__ and __BSS_SIZE__

   # The HEAP segment is used by the dynamic memory allocation malloc()
   # and free(). Currently not supported.
   HEAP:
      load     RAM
      type     bss
      optional yes;

   STARTUP:
      load     ROM
      type     ro;
   ONCE:
      load     ROM
      type     ro
      optional yes;

   # The CODE segment contains the runnable program. It must reside in ROM.
   # This is read-only and therefore does not support self-modifying code.
   CODE:
      load     ROM
      type     ro;

   # The RODATA segment contains read-only data, e.g. constant strings. They
   # are placed in ROM.
   RODATA:
      load     ROM
      type     ro;

   # The VECTORS segment consists solely of the three interrupt vectors
   # NMI, Reset, and IRQ.
   VECTORS:
      load     ROM
      type     ro
      start    $FFFA;
}

FEATURES {
   CONDES:
      segment  STARTUP
      type     constructor
      label    __CONSTRUCTOR_TABLE__
      count    __CONSTRUCTOR_COUNT__;
   CONDES:
      segment  STARTUP
      type     destructor
      label    __DESTRUCTOR_TABLE__
      count    __DESTRUCTOR_COUNT__;
}

SYMBOLS {
   # Define the stack size for the application
   __STACKSIZE__:
      type     weak
      value    $0200;
}

